import pandas as pd
import json
import os
from globals import BASE_DIR

# The Context-POI general evaluation and the top-k recommendation outputs generated by CAPRI follow a different format than those by RecBole.
# We convert the format to enable a unified evaluation process.

available_datasets = ["snowcard", "yelp"]

for dataset in available_datasets:
    OUTPUT_DIR = f"{BASE_DIR}{dataset}_dataset/recommendations/"
    recs = os.listdir(OUTPUT_DIR)

    if ".DS_Store" in recs:
        recs.remove(".DS_Store")

    capri_recs = []
    for dir in recs:
        if dir.split("-")[1] == "contextpoi":  # Filter for contextpoi directories
            capri_recs.append(dir)

    for dir in capri_recs:
        dir_path = os.path.join(OUTPUT_DIR, dir)
        files = os.listdir(dir_path)

        eval_file = next((f for f in files if f.startswith("Eval")), None)

        if eval_file:
            eval_csv = os.path.join(dir_path, eval_file)
            json_file = os.path.join(dir_path, "general_evaluation.json")
            eval_df = pd.read_csv(eval_csv)

            metrics = eval_df.iloc[0].to_dict()
            print(f"Metrics for {dir}: {metrics}")

            evaluation_data = {
                "test_result": {
                    "recall@10": metrics.get("recall"),
                    "ndcg@10": metrics.get("ndcg"),
                    "precision@10": metrics.get("precision"),
                    "map@10": metrics.get("map"),
                }
            }

            with open(json_file, "w") as f:
                json.dump(evaluation_data, f, indent=4)

            print(f"Saved general_evaluation.json to {json_file}")
        else:
            print(f"No Eval file found in {dir_path}")

        rec_file = next((f for f in files if f.startswith("Rec")), None)

        if rec_file:
            rec_txt = os.path.join(dir_path, rec_file)
            json_file = os.path.join(dir_path, "top_k_recommendations.json")

            recommendations = {}
            with open(rec_txt, "r") as f:
                for line in f:
                    parts = line.strip().split("\t")

                    if len(parts) == 3:
                        user_id = parts[1]  # Second column is the user_id
                        item_ids = parts[2].split(
                            ","
                        )  # Third column contains the item_ids

                        user_id = f"{user_id}_x"
                        item_ids = [f"{item}_x" for item in item_ids]

                        recommendations[user_id] = [{"item_id": item_ids}]

            with open(json_file, "w") as f:
                json.dump(recommendations, f, indent=4)

            print(f"Saved top_k_recommendations.json to {json_file}")
        else:
            print(f"No Rec file found in {dir_path}")
